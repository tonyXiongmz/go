package main

import "fmt"

func main() {
	/*var arr1 = [2]string{1:"ziong",0:"25"}

	for i,v:= range arr1{
		fmt.Printf("数组arr%d的值为%v\n",i,v)
	}*/

	arr()
	maxarr()
	sumavg()
}

//输出26个大写英文字母
func arr(){
	var arr1  [26]byte
	for i:=0;i<26;i++{
		arr1[i] = 'A' + byte(i)
	}


	for _,v := range arr1{
		fmt.Printf("%c\t",v)
	}
	fmt.Printf("\n")
}

//输出数组的最大值
func maxarr(){
	var arr = [...]int{5,6,81,25,0,14,-1,100}
	var maxValue = arr[0]
	var maxIndex = 0

	for i:=1;i<len(arr);i++{
		if maxValue < arr[i]{
			maxValue = arr[i]
			maxIndex = i
		}
	}

	fmt.Printf("数组的最大值是%d,最大值的下标是%d\n",maxValue,maxIndex)
}

//输出数组的和及平均值
func sumavg(){
	var arr = [...]int{5,7,15,62,84,25,11}
	var sum int = 0
	for _,v := range arr{
		sum += v
	}

	fmt.Printf("数组的和为%d,平均值为%.2f\n",sum,float64(sum)/float64(len(arr)))
}


//数组反转显示
func arrrev(){
	rand.Seed(time.Now().Unix())
	var arr [1000]int
	len := len(arr)
	for i:=0;i<len;i++{
		arr[i] = rand.Intn(100000)
		//fmt.Printf("数组反转的值为%d，下标为%d\t\n",arr[i],i)
	}

	//方法1
	start1:= time.Now().UnixNano()
	for j :=len-1;j>=0;j--{
		fmt.Printf("数组反转的值为%d，下标为%d\n",arr[j],j)
	}
	end1 := time.Now().UnixNano()
	fmt.Printf("for循环反转消耗的时长为%d\n",end1 - start1)

	//方法2 这种方法更高效，基本无时间消耗
	start2:= time.Now().UnixNano()
	var temp int
	for k:=0;k<len/2;k++{
		temp = arr[len - 1 -k]
		arr[len - 1 -k] = arr[k]
		arr[k] = temp
	}
	fmt.Printf("数组替换的值为%d\n",arr)
	end2 := time.Now().UnixNano()
	fmt.Printf("for替换反转消耗的时长为%d\n",end2 - start2)
}
