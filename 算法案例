内部算法，冒泡算法、快速算法
//--------冒泡算法---------
一共进行arr.length-1轮交换，每轮交换逐次减少，当前一个数比后一个数大时，开始交换

func maopao(){
	arr := []int{11,23,10,35,21,93,34,50,75,85}
	len := len(arr)//10
	var num int = 0
	for i:=1;i<len;i++{
		for j:=0;j<len-i;j++{
			if arr[j+1]<arr[j]{
				var temp = arr[j]
				arr[j] = arr[j+1]
				arr[j+1] = temp
				num++
			}
		}

	}

	fmt.Println(arr)
	fmt.Println(num)
}

func bull( arr *[10]int){
	var num = 0
	var length int = len(*arr)
	for i :=0;i<length-1;i++{
		for j:=0;j<length-i-1;j++{
			if (*arr)[j] > (*arr)[j+1]{
				temp := (*arr)[j]
				(*arr)[j] = (*arr)[j+1]
				(*arr)[j+1] = temp
				num ++
			}
		}
	}
	fmt.Println(num)
	fmt.Println(arr)
}



//---------------------查找-----------------
1、顺序查找
func shun(){
	var name string
	fmt.Println("请输入姓名")
	fmt.Scanln(&name)
	var arr = [5]string{"Tom","Jack","Bee","Neo","Luka"}
	var index int = -1
	for i,v := range arr{
		if v == name{
			index = i
			break
		}
	}
	if index != -1{
		fmt.Printf("查找成功,下标为%v\n",index)
	}else{
		fmt.Printf("查找失败\n")
	}
}
2、二分查找，只能是有序数组才能使用二分查找
func ercent(arr []int,leftindex int,rightindex int,findval int){
	if leftindex>rightindex{
		fmt.Println("没有找到")
		return
	}
	 middle := (leftindex+rightindex)/2
	if arr[middle] > findval{
		ercent(arr,leftindex,middle-1,findval)
	}else if arr[middle] < findval{
		ercent(arr,middle+1,rightindex,findval)
	}else{
		fmt.Printf("查到你所要的值，下标%d\n",middle)
	}
}

