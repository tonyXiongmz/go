package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	/*var arr = [2][3]int{{1,2,4},{3,5,9}}
	for _,v := range arr{
		for _,val:= range v{
			fmt.Print(val," ")
		}
		fmt.Println()
	}*/
	//chengji()
	//number()
	//maosort()
	//erwei()
	//fourF()
	//descSort()
	//serach()
	//exec001()
	//exec002([5]int{33,11,52,488,12})
	exec003()
}

//求班级学生的成绩和平均分
func chengji(){
	var class = [3][5]int{}
	for i,v := range class{
		for index,_ := range v{
			fmt.Printf("请输入第%d班的第%d个学生的成绩\n",i+1,index+1)
			fmt.Scanln(&class[i][index])
		}
	}

	var totalSum float64 = 0.0
	var num int = 0
	for i,v := range class{
		var sum float64 = 0.0
		for _,val := range v{
			sum += float64(val)
			num ++
		}
		fmt.Printf("第%d班级的总分是%v，平均分是%.2f\n",i+1,sum,sum/float64(len(class[i])))
		totalSum += sum
	}
	fmt.Printf("所有班级的总分是%v，学生人数%d,平均分是%.2f\n",totalSum,num,totalSum/float64(num))
}

//1、随机生成10个整数（1--100）保存到数组，并倒序打印，以及求平均值、求最大值和最大值的下标，并查找里面是否有55
func number(){
	rand.Seed(time.Now().UnixNano())
	var arr  = [10]int{}
	var sum int = 0
	length := len(arr)
	//给数组赋值
	for i:=0;i<length;i++{
		arr[i] = rand.Intn(100) +1
	}
	fmt.Println(arr)

	//求和，查找
	var flag = false
	for j:=0;j<length;j++{
		sum += arr[j]
		if arr[j] == 55{
			flag = true
		}
	}
	fmt.Println(sum)
	//倒序输出
	for k:=0;k<length/2;k++{
		var temp int
		temp = arr[k]
		arr[k] = arr[length-1-k]
		arr[length-1-k] = temp
	}

	//求最大值
	var maxValue int = arr[0]
	var maxIndex int
	for h:=1;h<length;h++{
		if maxValue< arr[h]{
			maxValue = arr[h]
			maxIndex = h
		}
	}
	fmt.Println(arr)
	fmt.Printf("该数组的总和是%d\t，平均值是%.2f\t,最大值是%d\t,最大值的索引%d\t,是否包含55这个数%v\n",sum,float64(sum)/float64(length),maxValue,maxIndex,flag)
}

//2、已知有一个排序（升序）好的数组，要求插入一个元素，最后打印这个数组，依然是升序
func maosort(){
	var arr = [...]int{3,5,6,9,10,15,25,34}
	var newArr = arr[:]
	fmt.Println(newArr)
	rand.Seed(time.Now().UnixNano())
	newArr = append(newArr, rand.Intn(100)+1)
	length := len(newArr)
	for i:=1;i<length;i++{
		for j:=0;j<length-i;j++{
			if newArr[j]>newArr[j+1]{
				temp := newArr[j+1]
				newArr[j+1] = newArr[j]
				newArr[j] = temp
			}
		}
	}

	fmt.Println(newArr)
}

//3、定义一个3行4列的二维数组，逐个从键盘输入值，编写程序将四周的数据清零
func erwei(){
	var arr = [3][4]int{}
	fmt.Println(arr)
	length := len(arr)
	for i:=0;i<length;i++{
		for j:=0;j<len(arr[i]);j++{
			fmt.Printf("请输入第%d行第%d列的值\n",i+1,j+1)
			fmt.Scanln(&arr[i][j])
		}
	}

	for k:=0;k<length;k++{
		for l :=0;l<len(arr[k]);l++{
			if k==0 || k== length-1{
				arr[k][l] = 0
			}else{
				arr[k][0] = 0
				arr[k][len(arr[k])-1] = 0
			}
			fmt.Printf("%d\t",arr[k][l])
		}
		fmt.Println()
	}
	///fmt.Println(arr)
}

//4、定义一个4行4列的二维数组，逐个从键盘输入值，然后将第一行和第四行的数据进行交换，将第二行和第三行的数据进行交换
func fourF(){
	var arr = [4][4]int{}
	length := len(arr)
	 for i:=0;i<length;i++{
	 	for j:=0;j<len(arr[i]);j++{
	 		fmt.Printf("请输入第%d行第%d列的数据\n",i+1,j+1)
	 		fmt.Scanln(&arr[i][j])
		}
	 }
	fmt.Println(arr)
	 for k:=0;k<length/2;k++{
	 	var temp = arr[k]
	 	arr[k] = arr[length-1-k]
	 	arr[length-1-k] = temp
	 }

	 fmt.Println(arr)
}
//5、试保存1 3 5 7 9五个奇数到数组，并倒序打印
func descSort(){
	var arr = [...]int{1,3,5,7,9}
	length := len(arr)
	for i:= length-1;i>=0;i--{
		fmt.Println(arr[i])
	}
}
//6、试写出实现查找的核心代码，比如已知数组arr[10]string,里面保存十个元素，现要查找“AA”是否存在，打印提示，如果有多个“AA”，也要找到对应的下标
func serach(){
	var arr = [10]string{"AA","bb","cc","dd","ee","AA","ac","dd","ef","de"}
	for k,v := range arr{
		if v=="AA"{
			fmt.Printf("该元素存在于数组中,下标%d\n",k)
		}
	}
}
//7、随机生成10个整数（1-100），使用冒泡排序，然后使用二分查找，查找是否有90这个数，并显示下标，如果没有则提示“找不到该数”
func exec001(){
	rand.Seed(time.Now().UnixNano())
	var arr = [10]int{}
	for k,_ := range arr{
		arr[k] = rand.Intn(100)+1
	}
	fmt.Println(arr)
	for i:=1;i<10;i++{
		for j:=0;j<10-i;j++{
			if arr[j+1] < arr[j]{
				var temp = arr[j+1]
				arr[j+1] = arr[j]
				arr[j] = temp
			}
		}
	}
	fmt.Println(arr)
	twoCent(arr,0,9,90)
}

func twoCent(arr [10]int,leftIndex,rightIndex,findVal int){
	if leftIndex>rightIndex{
		fmt.Println("找不到该数")
		return
	}
	middle := (leftIndex + rightIndex)/2
	if arr[middle] > findVal{
		twoCent(arr,leftIndex,middle-1,findVal)
	}else if arr[middle] < findVal{
		twoCent(arr,middle+1,rightIndex,findVal)
	}else{
		fmt.Printf("%v存在于该数组中，下标为%d\n",findVal,middle)
	}
}
//8、编写一个函数，可以接收一个数组，该数组有5个元素，请找出最大的数和最小的数和对应的数组下标
func exec002(arr [5]int){
	var maxValue int = arr[0]
	var minValue int = arr[0]
	var maxIndex int = 0
	var minIndex int = 0

	for i:=1;i<len(arr);i++{
		if arr[i] > maxValue{
			maxValue = arr[i]
			maxIndex = i
		}
		if arr[i] < minValue{
			minValue = arr[i]
			minIndex = i
		}
	}

	fmt.Printf("该数组的最大值为%d，下标为%d\t,最小值为%d,下标为%d\n",maxValue,maxIndex,minValue,minIndex)
}
//9、定义一个数组，并给出8个整数，求该数组中大于平均值的数的个数，和小于平均值的数的个数
func exec003(){
	var arr = [8]int{33,24,23,45,22,64,75,46}
	sum := 0
	var avgNum float64 = 0.0
	for _,v:= range arr{
		sum += v
	}
	avgNum = float64(sum)/float64(8)

	var max int = 0
	var min int = 0
	for _,v := range arr{
		if float64(v) > avgNum{
			max ++
		}
		if float64(v) < avgNum{
			min ++
		}
	}

	fmt.Printf("该数组元素的总和为%d，平均值为%.2f，大于平均值的元素个数有%d，小于平均值的元素个数有%d\n",sum,avgNum,max,min)
}

//10、跳水比赛，8个评委打分，运动员成绩是去掉一个最高分和一个最低分，剩下的分数的平均分是最后得分，使用一维数组实现以下功能，
//（1）请把打最高分的评委和最低分的评委找出来
//（2）找出最佳评委和最差评委。最佳评委就是和最后得分相近的评委，最差评委就是和最后得分相差最大的。
func exec004(){
	var arr = [8]float64{}

	for k,_:= range arr{
		fmt.Printf("请第%d位评委给选手打分\n",k+1)
		fmt.Scanln(&arr[k])
	}

	var maxValue  float64 = arr[0]
	var minValue float64 = arr[0]
	var maxIndex int = 0
	var minIndex int = 0


	for i:=1;i<len(arr);i++{
		if arr[i] > maxValue{
			maxValue = arr[i]
			maxIndex = i
		}

		if arr[i] < minValue{
			minValue = arr[i]
			minIndex = i
		}
	}
	var newArr = [8]float64 {}
	newArr = arr
	arr[maxIndex] = 0.0
	arr[minIndex] = 0.0
	var sum float64 = 0.0
	for _,v:= range arr {
		sum += v
	}

	var avgNum = sum/8

	for k,v := range newArr{

	}
}
